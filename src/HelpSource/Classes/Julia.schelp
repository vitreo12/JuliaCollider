CLASS:: Julia
SUMMARY:: Executes a JuliaDef on the server
CATEGORIES:: JuliaCollider>Classes, UGens>JuliaCollider
RELATED:: Classes/JuliaDef, Classes/JuliaProxy, Overviews/JuliaCollider

DESCRIPTION::
The link::Classes/Julia:: class serves two purposes:

NUMBEREDLIST::
##It is used for client/server interactions, like booting emphasis::JuliaCollider:: on the server or control various server-wide options.
##It is used as a UGen to turn a compiled strong::@object::, represented in sclang by a valid link::Classes/JuliaDef::, into actual audio output: when used as a UGen, a link::Classes/Julia:: object is a direct interface to the server's representation of a compiled link::Classes/JuliaDef::.

For more informations on the interaction between the use of link::Classes/Julia:: as a UGen and a link::Classes/JuliaDef:: object, look into the link::Classes/JuliaDef::'s help file.
::

CLASSMETHODS::

METHOD:: boot
Boot emphasis::JuliaCollider:: on the specified link::Classes/Server::.
ARGUMENT:: server
The link::Classes/Server:: to boot emphasis::JuliaCollider:: on.
ARGUMENT:: pool_size
The size of the memory for emphasis::JuliaCollider::'s real-time allocator. Minimum (and default) is 131072 Kb.

METHOD:: bootWithServer
Boot emphasis::JuliaCollider:: together with the specified server.
ARGUMENT:: server
The link::Classes/Server:: to boot emphasis::JuliaCollider:: on.
ARGUMENT:: pool_size
The size of the memory for emphasis::JuliaCollider::'s real-time allocator. Minimum (and default) is 131072 Kb.

METHOD:: ar

warning::
In order to use the link::Classes/Julia:: UGen, the link::Classes/JuliaDef:: must be known and compiled when defining the link::Classes/SynthDef:: where the specific link::Classes/Julia:: UGen is declared. For dynamic switching of link::Classes/JuliaDef::s, check the link::Classes/JuliaProxy:: UGen class.
::

ARGUMENT::  ... args
Variable number of arguments. The first argument strong::must:: always be a link::Classes/JuliaDef::, followed any number of link::Classes/UGen:: arguments, according to the number of inputs stated in the strong::@object::'s strong::@inputs:: macro.

note::
As of now, the link::Classes/Julia:: UGen only accepts audio inputs (strong::.ar:: UGen method). Use the link::Classes/DC:: UGen for strong::kr::/strong::ir:: to strong::ar:: conversion.
::

note::
When recompiling the link::Classes/JuliaDef:: to which the link::Classes/Julia:: UGen is pointing at, the changes will immediately be reflected in the audio output. This also means that the number of audio inputs/outputs stated in the strong::@object:: might change while the link::Classes/Julia:: UGen is playing.

NUMBEREDLIST::
##strong::IF:: the strong::@inputs::/strong::@outputs:: count remains the same as the original one, the link::Classes/Julia:: UGen will output the new compiled code.
##strong::IF:: the strong::@inputs::/strong::@outputs:: count is less than the original one, the link::Classes/Julia:: UGen will output the new compiled code using the inputs/outputs up to the original amount.
##strong::IF:: the strong::@inputs::/strong::@outputs:: count is more than the original one, the link::Classes/Julia:: UGen will output silence.
::
::

METHOD:: kr
link::Classes/Julia:: currently only supports the .ar method.

METHOD:: runtimeMode
Change the mode of operation for all emphasis::JuliaCollider:: UGens (link::Classes/Julia:: and link::Classes/JuliaProxy:: alike): either emphasis::"debug":: or emphasis::"perform"::. What this command does is to switch on/off a runtime check on the audio loop for any errors that the precompilation of the link::Classes/JuliaDef:: might have missed. For example, if having multiple "if" branches in your emphasis::JuliaCollider:: code, they might have not been all executed in the compilation, and the variables declared in those branches might contain wrong types, or, generally, mistakes (e.g., returning the wrong values).

note::
emphasis::JuliaCollider:: starts, by default, with the emphasis::"debug":: mode turned on.
::

warning::
This is an experimental feature and is still work in progress.
::

ARGUMENT:: server
The link::Classes/Server:: to send the command to.
ARGUMENT:: new_mode
A link::Classes/String:: which can either be:
NUMBEREDLIST::
##strong::"debug":: : Switch on the check on all link::Classes/Julia:: / link::Classes/JuliaProxy:: code.
##strong::"perform":: : Switch off the check on all link::Classes/Julia:: / link::Classes/JuliaProxy:: code.
warning::
If you use the strong::"perform":: mode and you haven't properly debugged your code (e.g., you might have some errors in conditions that depend on some UGen input value, or you haven't checked if all the branches of your emphasis::JuliaCollider:: code actually lead to sensible results), the server could crash.
::
::

EXAMPLES::

For a more in depth look into the provided examples, see:
NUMBEREDLIST::
##link::Tutorials/JC_09_Examples_1::
##link::Tutorials/JC_10_Examples_2::
::

code::
//Boot server and Julia
Julia.bootWithServer(s);

(
//Compile "Saw.jl" example (an anti-aliased sawtooth oscillator)
k = JuliaDef(s, Platform.userExtensionDir ++ "/JuliaCollider/Examples/Saw.jl");

//Compile "SVF.jl" example
f = JuliaDef(s, Platform.userExtensionDir ++ "/JuliaCollider/Examples/SVF.jl");
)

//Compile a SynthDef with the the two JuliaDefs compiled in the Julia.ar() first inputs
(
SynthDef(\JuliaFilteredSaw, {
	arg freq = 200;
	var saw1, saw2, filter;

	//First input = JuliaDef
	//Second input = frequency
	saw1 = Julia.ar(k, DC.ar(freq));
	saw2 = Julia.ar(k, DC.ar(freq + rrand(-3.0, 3.0)));

	//First input  = JuliaDef
	//Second input = audio signal
	//Third input  = filter type (0 = lowpass, 1 = highpass, 2 = bandpass)
	//Fourth input = Cutoff
	//Fifth input  = Resonance
	filter = Julia.ar(f, saw1 + saw2, DC.ar(0.0), SinOsc.ar(0.3).linlin(-1,1, 100, 5000), DC.ar(0.9));

	Out.ar([0, 1], filter);
}).send(s)
)

//Play the SynthDef
Synth(\JuliaFilteredSaw);

::
